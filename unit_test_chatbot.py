#!/usr/bin/env python3
"""
Unit test for RAG chatbot with various question types.
Tests different intents and scenarios to evaluate system performance.
"""

import sys
import os
sys.path.append('/app')

import requests
import json
import time
from typing import List, Dict, Any

class ChatbotTester:
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.api_url = f"{base_url}/api/query"
        
    def test_query(self, query: str) -> Dict[str, Any]:
        """Test a single query and return results"""
        payload = {
            "q": query,
            "k": 5
        }
        
        try:
            response = requests.post(self.api_url, json=payload, timeout=120)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            return {
                "query": query,
                "answer": f"ERROR: {str(e)}",
                "score": 0,
                "sources": []
            }
    
    def run_category_test(self, category_name: str) -> None:
        """Run tests for a specific category only"""
        test_cases = self._get_test_cases()
        
        # Find the specific category
        target_category = None
        for test_group in test_cases:
            if category_name.lower() in test_group['category'].lower():
                target_category = test_group
                break
        
        if not target_category:
            print(f"‚ùå Category '{category_name}' not found!")
            return
        
        print("=" * 80)
        print(f"ü§ñ RAG CHATBOT - {target_category['category'].upper()}")
        print("=" * 80)
        print()
        
        total_tests = 0
        total_score = 0
        
        print(f"üìÇ {target_category['category']}")
        print("-" * 50)
        
        for question in target_category['questions']:
            total_tests += 1
            print(f"\n‚ùì –í—ä–ø—Ä–æ—Å: {question}")
            
            result = self.test_query(question)
            score = result.get('score', 0)
            answer = result.get('answer', '–ù—è–º–∞ –æ—Ç–≥–æ–≤–æ—Ä')
            sources = result.get('sources', [])
            
            total_score += score
            
            print(f"üìä Score: {score}/100")
            print(f"üí¨ –û—Ç–≥–æ–≤–æ—Ä: {answer}")
            
            if sources:
                print(f"üìö –ò–∑—Ç–æ—á–Ω–∏—Ü–∏ ({len(sources)}):")
                for source in sources[:3]:  # Show max 3 sources
                    source_id = source.get('source_id', 'N/A')
                    relevance = source.get('relevance', 0)
                    print(f"   ‚Ä¢ {source_id} ({relevance:.1f}%)")
            
            # Add small delay to avoid overwhelming the API
            time.sleep(0.5)
        
        # Summary for category
        avg_score = total_score / total_tests if total_tests > 0 else 0
        high_score_tests = sum(1 for _ in range(total_tests) if avg_score >= 80)
        
        print(f"\nüìà CATEGORY SUMMARY:")
        print(f"   Tests: {total_tests}")
        print(f"   Average score: {avg_score:.1f}/100")
        print(f"   Success rate: {(high_score_tests/total_tests)*100:.1f}%")
        print("=" * 80)

    def _get_test_cases(self) -> List[Dict[str, Any]]:
        """Get all test cases"""
        return [
            # Product queries - –æ–±—â–∏
            {
                "category": "–ü—Ä–æ–¥—É–∫—Ç–∏ - –æ–±—â–∏",
                "questions": [
                    "–ö–∞–∫–≤–∏ –ø—Ä–æ–¥—É–∫—Ç–∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç–µ?",
                    "–ö–∞–∫–≤–æ –∏–º–∞—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥–∞?",
                    "–ü–æ–∫–∞–∂–µ—Ç–µ –º–∏ –ø—Ä–æ–¥—É–∫—Ç–∏—Ç–µ",
                    "–ö–∞–∫–≤–æ –ø—Ä–æ–¥–∞–≤–∞—Ç–µ?",
                    "–ò–º–∞—Ç–µ –ª–∏ —Å—Ç–æ–∫–∏?",
                    "–ö–∞–∫—ä–≤ –µ –≤–∞—à–∏—è—Ç –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç?",
                    "–ü–æ–∫–∞–∂–µ—Ç–µ –º–∏ –Ω–∞–ª–∏—á–Ω–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç–∏",
                    "–ö–∞–∫–≤–∏ —Å—Ç–æ–∫–∏ –∏–º–∞—Ç–µ?"
                ]
            },
            # –ü—Ä–æ–¥—É–∫—Ç–∏ - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            {
                "category": "–ü—Ä–æ–¥—É–∫—Ç–∏ - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", 
                "questions": [
                    "–ü—Ä–µ–¥–ª–∞–≥–∞—Ç–µ –ª–∏ –ª–∞–ø—Ç–æ–ø–∏?",
                    "–ò–º–∞—Ç–µ –ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏?",
                    "–ü—Ä–æ–¥–∞–≤–∞—Ç–µ –ª–∏ —á–∞—Å–æ–≤–Ω–∏—Ü–∏?",
                    "–ò–º–∞—Ç–µ –ª–∏ —Ç–∞–±–ª–µ—Ç–∏?",
                    "–ü—Ä–µ–¥–ª–∞–≥–∞—Ç–µ –ª–∏ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∏?",
                    "–ò–º–∞—Ç–µ –ª–∏ –º–æ–±–∏–ª–Ω–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏?",
                    "–ü—Ä–æ–¥–∞–≤–∞—Ç–µ –ª–∏ –∫–æ–º–ø—é—Ç—Ä–∏?",
                    "–ò–º–∞—Ç–µ –ª–∏ –Ω–æ—É—Ç–±—É—Ü–∏?",
                    "–ü—Ä–µ–¥–ª–∞–≥–∞—Ç–µ –ª–∏ —Å–ª—É—à–∞–ª–∫–∏?",
                    "–ò–º–∞—Ç–µ –ª–∏ –∫–∞–º–µ—Ä–∏?",
                    "–ü—Ä–æ–¥–∞–≤–∞—Ç–µ –ª–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∏?",
                    "–ò–º–∞—Ç–µ –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏?",
                    "–ü—Ä–µ–¥–ª–∞–≥–∞—Ç–µ –ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∏?",
                    "–ò–º–∞—Ç–µ –ª–∏ –º–∏—à–∫–∏?",
                    "–ü—Ä–æ–¥–∞–≤–∞—Ç–µ –ª–∏ –¥—Ä–æ–Ω–æ–≤–µ?"
                ]
            },
            # –ü–ª–∞—â–∞–Ω–µ –∏ –ø–æ—Ä—ä—á–∫–∏
            {
                "category": "–ü–ª–∞—â–∞–Ω–µ –∏ –ø–æ—Ä—ä—á–∫–∏",
                "questions": [
                    "–ö–∞–∫ –º–æ–≥–∞ –¥–∞ –ø–ª–∞—Ç—è?",
                    "–ú–æ–∂–µ –ª–∏ –¥–∞ –ø–ª–∞—Ç—è —Å –∫—Ä–µ–¥–∏—Ç–Ω–∞ –∫–∞—Ä—Ç–∞?",
                    "–ü—Ä–µ–¥–ª–∞–≥–∞—Ç–µ –ª–∏ —Ä–∞–∑—Å—Ä–æ—á–µ–Ω–æ –ø–ª–∞—â–∞–Ω–µ?",
                    "–ö–∞–∫ –¥–∞ –Ω–∞–ø—Ä–∞–≤—è –ø–æ—Ä—ä—á–∫–∞?",
                    "–ö–∞–∫–≤–∏ —Å–∞ –Ω–∞—á–∏–Ω–∏—Ç–µ –Ω–∞ –ø–ª–∞—â–∞–Ω–µ?",
                    "–ü—Ä–∏–µ–º–∞—Ç–µ –ª–∏ –∫–∞—Ä—Ç–∏?",
                    "–ú–æ–≥–∞ –ª–∏ –¥–∞ –ø–ª–∞—Ç—è —Å –∫–∞—Ä—Ç–∞?",
                    "–ò–º–∞ –ª–∏ –Ω–∞–ª–æ–∂–µ–Ω –ø–ª–∞—Ç–µ–∂?",
                    "–ö–∞–∫ —Å–µ –ø–ª–∞—â–∞?",
                    "–ú–æ–∂–µ –ª–∏ –±–∞–Ω–∫–æ–≤ –ø—Ä–µ–≤–æ–¥?",
                    "–ü—Ä–∏–µ–º–∞—Ç–µ –ª–∏ PayPal?",
                    "–ò–º–∞ –ª–∏ —Ä–∞–∑—Å—Ä–æ—á–µ–Ω–æ –ø–ª–∞—â–∞–Ω–µ?",
                    "–ö–∞–∫ –¥–∞ –ø–ª–∞—Ç—è –æ–Ω–ª–∞–π–Ω?",
                    "–ú–æ–≥–∞ –ª–∏ –¥–∞ –ø–ª–∞—Ç—è –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–∞?",
                    "–ö–∞–∫–≤–∏ —Å–∞ –æ–ø—Ü–∏–∏—Ç–µ –∑–∞ –ø–ª–∞—â–∞–Ω–µ?"
                ]
            },
            # –î–æ—Å—Ç–∞–≤–∫–∞ –∏ –ø—Ä–æ—Å–ª–µ–¥—è–≤–∞–Ω–µ
            {
                "category": "–î–æ—Å—Ç–∞–≤–∫–∞ –∏ –ø—Ä–æ—Å–ª–µ–¥—è–≤–∞–Ω–µ",
                "questions": [
                    "–ö–æ–≥–∞ —â–µ –ø—Ä–∏—Å—Ç–∏–≥–Ω–µ –ø–æ—Ä—ä—á–∫–∞—Ç–∞?",
                    "–ö–∞–∫ –º–æ–≥–∞ –¥–∞ –ø—Ä–æ—Å–ª–µ–¥—è –ø–æ—Ä—ä—á–∫–∞—Ç–∞ —Å–∏?",
                    "–ö–æ–ª–∫–æ –≤—Ä–µ–º–µ –æ—Ç–Ω–µ–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∞—Ç–∞?",
                    "–ö–æ–≥–∞ —â–µ –¥–æ–π–¥–µ –ø—Ä–∞—Ç–∫–∞—Ç–∞?",
                    "–ö–∞–∫–≤–æ –µ –≤—Ä–µ–º–µ—Ç–æ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫–∞?",
                    "–ö–æ–ª–∫–æ –¥–Ω–∏ –æ—Ç–Ω–µ–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∞—Ç–∞?",
                    "–ö–æ–≥–∞ —â–µ –ø–æ–ª—É—á–∞ –ø–æ—Ä—ä—á–∫–∞—Ç–∞?",
                    "–ö–∞–∫ –¥–∞ –ø—Ä–æ—Å–ª–µ–¥—è –ø—Ä–∞—Ç–∫–∞—Ç–∞?",
                    "–ò–º–∞ –ª–∏ –µ–∫—Å–ø—Ä–µ—Å–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞?",
                    "–ö–æ–ª–∫–æ –≤—Ä–µ–º–µ –æ—Ç–Ω–µ–º–∞ –¥–æ –°–æ—Ñ–∏—è?",
                    "–î–æ—Å—Ç–∞–≤—è—Ç–µ –ª–∏ –≤ —á—É–∂–±–∏–Ω–∞?",
                    "–ö–∞–∫–≤–∏ —Å–∞ —Å—Ä–æ–∫–æ–≤–µ—Ç–µ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫–∞?",
                    "–ö–æ–≥–∞ —â–µ –ø—Ä–∏—Å—Ç–∏–≥–Ω–µ –≤ –°–æ—Ñ–∏—è?",
                    "–ò–º–∞ –ª–∏ –±–µ–∑–ø–ª–∞—Ç–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞?",
                    "–ö–æ–ª–∫–æ —Å—Ç—Ä—É–≤–∞ –¥–æ—Å—Ç–∞–≤–∫–∞—Ç–∞?"
                ]
            },
            # –ì–∞—Ä–∞–Ω—Ü–∏—è –∏ —Å–µ—Ä–≤–∏–∑
            {
                "category": "–ì–∞—Ä–∞–Ω—Ü–∏—è –∏ —Å–µ—Ä–≤–∏–∑",
                "questions": [
                    "–ö–∞–∫–≤–∞ –≥–∞—Ä–∞–Ω—Ü–∏—è –∏–º–∞—Ç–µ?",
                    "–ö—ä–¥–µ –º–æ–≥–∞ –¥–∞ –ø–æ–ø—Ä–∞–≤—è –ø—Ä–æ–¥—É–∫—Ç?",
                    "–ö–∞–∫ –¥–∞ –Ω–∞–ø—Ä–∞–≤—è —Ä–µ–∫–ª–∞–º–∞—Ü–∏—è?",
                    "–ò–º–∞ –ª–∏ –≥–∞—Ä–∞–Ω—Ü–∏—è?",
                    "–ö–æ–ª–∫–æ –µ –≥–∞—Ä–∞–Ω—Ü–∏—è—Ç–∞?",
                    "–ö–∞–∫–≤–∞ –µ –≥–∞—Ä–∞–Ω—Ü–∏—è—Ç–∞ –∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∏—Ç–µ?",
                    "–ö—ä–¥–µ –µ —Å–µ—Ä–≤–∏–∑—ä—Ç?",
                    "–ö–∞–∫ –¥–∞ –Ω–∞–ø—Ä–∞–≤—è —Ä–µ–º–æ–Ω—Ç?",
                    "–ò–º–∞—Ç–µ –ª–∏ —Å–µ—Ä–≤–∏–∑?",
                    "–ö—ä–¥–µ –º–æ–≥–∞ –¥–∞ –ø–æ–ø—Ä–∞–≤—è –ª–∞–ø—Ç–æ–ø–∞?",
                    "–ö–∞–∫–≤–∞ –µ –≥–∞—Ä–∞–Ω—Ü–∏—è—Ç–∞ –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞?",
                    "–ò–º–∞ –ª–∏ –≥–∞—Ä–∞–Ω—Ü–∏—è –∑–∞ —Å–ª—É—à–∞–ª–∫–∏—Ç–µ?",
                    "–ö—ä–¥–µ –º–æ–≥–∞ –¥–∞ –ø–æ–ø—Ä–∞–≤—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞?",
                    "–ö–∞–∫ –¥–∞ –Ω–∞–ø—Ä–∞–≤—è —Ä–µ–∫–ª–∞–º–∞—Ü–∏—è –∑–∞ –ø—Ä–æ–¥—É–∫—Ç?",
                    "–ò–º–∞—Ç–µ –ª–∏ —Å–µ—Ä–≤–∏–∑–µ–Ω —Ü–µ–Ω—Ç—ä—Ä?"
                ]
            },
            # –†–∞–±–æ—Ç–Ω–æ –≤—Ä–µ–º–µ
            {
                "category": "–†–∞–±–æ—Ç–Ω–æ –≤—Ä–µ–º–µ",
                "questions": [
                    "–†–∞–±–æ—Ç–∏—Ç–µ –ª–∏ –≤ –Ω–µ–¥–µ–ª—è?",
                    "–ö–æ–≥–∞ —Ä–∞–±–æ—Ç–∏—Ç–µ?",
                    "–†–∞–±–æ—Ç–Ω–æ –≤—Ä–µ–º–µ",
                    "–û—Ç–≤–æ—Ä–µ–Ω–∏ –ª–∏ —Å—Ç–µ –≤ —Å—ä–±–æ—Ç–∞?",
                    "–î–æ –∫–æ–ª–∫–æ —á–∞—Å–∞ —Ä–∞–±–æ—Ç–∏—Ç–µ?",
                    "–û—Ç –∫–æ–ª–∫–æ —á–∞—Å–∞ –æ—Ç–≤–∞—Ä—è—Ç–µ?",
                    "–†–∞–±–æ—Ç–∏—Ç–µ –ª–∏ –≤ –ø–æ—á–∏–≤–Ω–∏ –¥–Ω–∏?",
                    "–ì—Ä–∞—Ñ–∏–∫ –Ω–∞ —Ä–∞–±–æ—Ç–∞",
                    "–ö–æ–≥–∞ —Å—Ç–µ –æ—Ç–≤–æ—Ä–µ–Ω–∏?",
                    "–†–∞–±–æ—Ç–∏—Ç–µ –ª–∏ –≤ –ø—Ä–∞–∑–Ω–∏—Ü–∏?",
                    "–û—Ç–≤–æ—Ä–µ–Ω–∏ –ª–∏ —Å—Ç–µ –¥–Ω–µ—Å?",
                    "–ö–æ–≥–∞ –∑–∞—Ç–≤–∞—Ä—è—Ç–µ?",
                    "–†–∞–±–æ—Ç–∏—Ç–µ –ª–∏ –≤–µ—á–µ—Ä?",
                    "–ò–º–∞—Ç–µ –ª–∏ –ø–æ—á–∏–≤–Ω–∏ –¥–Ω–∏?",
                    "–ö–æ–≥–∞ —Å—Ç–µ –∑–∞—Ç–≤–æ—Ä–µ–Ω–∏?"
                ]
            },
            # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            {
                "category": "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                "questions": [
                    "–ö–∞–∫ –¥–∞ —Å–µ —Å–≤—ä—Ä–∂–∞ —Å –≤–∞—Å?",
                    "–ö—ä–¥–µ —Å–µ –Ω–∞–º–∏—Ä–∞—Ç–µ?",
                    "–ö–∞–∫—ä–≤ –µ —Ç–µ–ª–µ—Ñ–æ–Ω—ä—Ç –≤–∏?",
                    "–ò–º–∞—Ç–µ –ª–∏ email?",
                    "–ö–∞–∫—ä–≤ –µ –∞–¥—Ä–µ—Å—ä—Ç –≤–∏?",
                    "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                    "–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞ –≤—Ä—ä–∑–∫–∞",
                    "Email –∞–¥—Ä–µ—Å",
                    "–ê–¥—Ä–µ—Å –Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∞",
                    "–ö–∞–∫ –¥–∞ –≤–∏ –Ω–∞–º–µ—Ä—è?",
                    "–ö—ä–¥–µ —Å—Ç–µ?",
                    "–ò–º–∞—Ç–µ –ª–∏ –æ—Ñ–∏—Å?",
                    "–ö–∞–∫ –¥–∞ —Å–µ —Å–≤—ä—Ä–∂–∞ —Å –ø–æ–¥–¥—Ä—ä–∂–∫–∞—Ç–∞?",
                    "–ò–º–∞—Ç–µ –ª–∏ —á–∞—Ç –ø–æ–¥–¥—Ä—ä–∂–∫–∞?",
                    "–ö–∞–∫ –¥–∞ –≤–∏ –ø–∏—à–∞?"
                ]
            },
            # –ü–æ–ª–∏—Ç–∏–∫–∏ –∏ —É—Å–ª–æ–≤–∏—è
            {
                "category": "–ü–æ–ª–∏—Ç–∏–∫–∏ –∏ —É—Å–ª–æ–≤–∏—è",
                "questions": [
                    "–ö–∞–∫–≤–∞ –µ –ø–æ–ª–∏—Ç–∏–∫–∞—Ç–∞ –∑–∞ –≤—Ä—ä—â–∞–Ω–µ?",
                    "–ú–æ–≥–∞ –ª–∏ –¥–∞ –≤—ä—Ä–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç?",
                    "–ö–∞–∫ –¥–∞ –≤—ä—Ä–Ω–∞ —Å—Ç–æ–∫–∞?",
                    "–ò–º–∞ –ª–∏ –≤—Ä—ä—â–∞–Ω–µ –Ω–∞ –ø–∞—Ä–∏—Ç–µ?",
                    "–ö–∞–∫–≤–∏ —Å–∞ —É—Å–ª–æ–≤–∏—è—Ç–∞ –∑–∞ –≤—Ä—ä—â–∞–Ω–µ?",
                    "–ö–æ–ª–∫–æ –¥–Ω–∏ –∏–º–∞–º –∑–∞ –≤—Ä—ä—â–∞–Ω–µ?",
                    "–ú–æ–≥–∞ –ª–∏ –¥–∞ –æ—Ç–º–µ–Ω—è –ø–æ—Ä—ä—á–∫–∞?",
                    "–ö–∞–∫ –¥–∞ –æ—Ç–º–µ–Ω—è –ø–æ—Ä—ä—á–∫–∞?",
                    "–ò–º–∞ –ª–∏ —Ç–∞–∫—Å–∞ –∑–∞ –≤—Ä—ä—â–∞–Ω–µ?",
                    "–ö–∞–∫ –¥–∞ –Ω–∞–ø—Ä–∞–≤—è —Ä–µ–∫–ª–∞–º–∞—Ü–∏—è?",
                    "–ö–∞–∫–≤–∏ —Å–∞ —É—Å–ª–æ–≤–∏—è—Ç–∞ –∑–∞ –ø–æ–∫—É–ø–∫–∞?",
                    "–ò–º–∞ –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è?",
                    "–ö–∞–∫–≤–∏ —Å–∞ –ø—Ä–∞–≤–∏–ª–∞—Ç–∞?",
                    "–ú–æ–≥–∞ –ª–∏ –¥–∞ –ø—Ä–æ–º–µ–Ω—è –ø–æ—Ä—ä—á–∫–∞?",
                    "–ö–∞–∫ –¥–∞ –ø—Ä–æ–º–µ–Ω—è –∞–¥—Ä–µ—Å–∞?"
                ]
            },
            # –¶–µ–Ω–∏ –∏ –ø—Ä–æ–º–æ—Ü–∏–∏
            {
                "category": "–¶–µ–Ω–∏ –∏ –ø—Ä–æ–º–æ—Ü–∏–∏",
                "questions": [
                    "–ò–º–∞—Ç–µ –ª–∏ –ø—Ä–æ–º–æ—Ü–∏–∏?",
                    "–ò–º–∞ –ª–∏ –æ—Ç—Å—Ç—ä–ø–∫–∏?",
                    "–ö–∞–∫–≤–∏ —Å–∞ —Ü–µ–Ω–∏—Ç–µ?",
                    "–ò–º–∞ –ª–∏ –Ω–∞–º–∞–ª–µ–Ω–∏—è?",
                    "–ö–æ–ª–∫–æ —Å—Ç—Ä—É–≤–∞ —Ç–æ–≤–∞?",
                    "–ö–∞–∫–≤–∞ –µ —Ü–µ–Ω–∞—Ç–∞?",
                    "–ò–º–∞—Ç–µ –ª–∏ –ø—Ä–æ–º–æ –∫–æ–¥?",
                    "–ò–º–∞ –ª–∏ –≤–∞—É—á–µ—Ä–∏?",
                    "–ö–∞–∫–≤–∏ —Å–∞ –∞–∫—Ü–∏–∏—Ç–µ?",
                    "–ò–º–∞ –ª–∏ —Å–ø–µ—Ü–∏–∞–ª–Ω–∏ –æ—Ñ–µ—Ä—Ç–∏?",
                    "–ö–æ–ª–∫–æ —Å—Ç—Ä—É–≤–∞ –¥–æ—Å—Ç–∞–≤–∫–∞—Ç–∞?",
                    "–ò–º–∞ –ª–∏ –±–µ–∑–ø–ª–∞—Ç–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞?",
                    "–ö–∞–∫–≤–∏ —Å–∞ —Ç–∞–∫—Å–∏—Ç–µ?",
                    "–ò–º–∞ –ª–∏ —Å–∫—Ä–∏—Ç–∏ —Ç–∞–∫—Å–∏?",
                    "–ö–∞–∫–≤–∞ –µ –æ–±—â–∞—Ç–∞ —Ü–µ–Ω–∞?"
                ]
            },
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –≤—ä–ø—Ä–æ—Å–∏
            {
                "category": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –≤—ä–ø—Ä–æ—Å–∏",
                "questions": [
                    "–ö–∞–∫ –¥–∞ –Ω–∞—Å—Ç—Ä–æ—è –ø—Ä–æ–¥—É–∫—Ç–∞?",
                    "–ò–º–∞ –ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏?",
                    "–ö–∞–∫ –¥–∞ –∏–∑–ø–æ–ª–∑–≤–∞–º —Ç–æ–≤–∞?",
                    "–ò–º–∞ –ª–∏ —Ä—ä–∫–æ–≤–æ–¥—Å—Ç–≤–æ?",
                    "–ö–∞–∫ –¥–∞ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–º —Å–æ—Ñ—Ç—É–µ—Ä–∞?",
                    "–ò–º–∞ –ª–∏ –¥—Ä–∞–π–≤–µ—Ä–∏?",
                    "–ö–∞–∫ –¥–∞ —Å–≤—ä—Ä–∂–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ—Ç–æ?",
                    "–ò–º–∞ –ª–∏ –∫–∞–±–µ–ª–∏?",
                    "–ö–∞–∫ –¥–∞ –∞–∫—Ç–∏–≤–∏—Ä–∞–º –≥–∞—Ä–∞–Ω—Ü–∏—è—Ç–∞?",
                    "–ò–º–∞ –ª–∏ —Å–æ—Ñ—Ç—É–µ—Ä?",
                    "–ö–∞–∫ –¥–∞ –æ–±–Ω–æ–≤—è —Å–∏—Å—Ç–µ–º–∞—Ç–∞?",
                    "–ò–º–∞ –ª–∏ —Ñ–∏—ä—Ä–º—É–µ—Ä?",
                    "–ö–∞–∫ –¥–∞ —Ä–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ—Ç–æ?",
                    "–ò–º–∞ –ª–∏ –ø—Ä–æ–±–ª–µ–º–∏ —Å –ø—Ä–æ–¥—É–∫—Ç–∞?",
                    "–ö–∞–∫ –¥–∞ —Ä–µ—à–∞ –ø—Ä–æ–±–ª–µ–º–∞?"
                ]
            },
            # Edge cases - –≥—Ä–∞–Ω–∏—á–Ω–∏ —Å–ª—É—á–∞–∏
            {
                "category": "Edge Cases - –≥—Ä–∞–Ω–∏—á–Ω–∏ —Å–ª—É—á–∞–∏",
                "questions": [
                    "–ö–∞–∫–≤–æ –µ –∫–≤–∞–Ω—Ç–æ–≤–æ—Ç–æ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ?",  # –ò–∑–≤—ä–Ω –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è—Ç–∞
                    "–ö–æ–ª–∫–æ –µ 2+2?",  # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ä–ø—Ä–æ—Å
                    "–ö–∞–∫–≤–æ –µ –≤—Ä–µ–º–µ—Ç–æ?",  # –û–±—â –≤—ä–ø—Ä–æ—Å
                    "–ö–æ–π –µ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—ä—Ç?",  # –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏ –≤—ä–ø—Ä–æ—Å
                    "–ö–∞–∫ –¥–∞ –≥–æ—Ç–≤—è?",  # –ö—É–ª–∏–Ω–∞—Ä–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏
                    "–ö–∞–∫–≤–æ –µ –ª—é–±–æ–≤—Ç–∞?",  # –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏ –≤—ä–ø—Ä–æ—Å
                    "–ö–æ–ª–∫–æ –µ –≤–∏—Å–æ–∫–æ –Ω–µ–±–µ—Ç–æ?",  # –ê–±—Å—Ç—Ä–∞–∫—Ç–µ–Ω –≤—ä–ø—Ä–æ—Å
                    "–ö–∞–∫ –¥–∞ –ª–µ—Ç—è?",  # –ù–µ—Ä–µ–∞–ª–µ–Ω –≤—ä–ø—Ä–æ—Å
                    "–ò–º–∞—Ç–µ –ª–∏ —Ö–µ–ª–∏–∫–æ–ø—Ç–µ—Ä–∏?",  # –ù–µ—Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â –ø—Ä–æ–¥—É–∫—Ç
                    "–ü—Ä–æ–¥–∞–≤–∞—Ç–µ –ª–∏ —Å–∞–º–æ–ª–µ—Ç–∏?",  # –ù–µ—Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â –ø—Ä–æ–¥—É–∫—Ç
                    "–ö–∞–∫ –¥–∞ —Å—Ç–∞–Ω–∞ –º–∏–ª–∏–æ–Ω–µ—Ä?",  # –§–∏–Ω–∞–Ω—Å–æ–≤ —Å—ä–≤–µ—Ç
                    "–ö–∞–∫–≤–æ –µ –∂–∏–≤–æ—Ç–∞?",  # –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏ –≤—ä–ø—Ä–æ—Å
                    "–ö–æ–ª–∫–æ –∑–≤–µ–∑–¥–∏ –∏–º–∞?",  # –ê—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏ –≤—ä–ø—Ä–æ—Å
                    "–ö–∞–∫ –¥–∞ —Å–µ –Ω–∞—É—á–∞ –¥–∞ –ª–µ—Ç—è?",  # –ù–µ—Ä–µ–∞–ª–µ–Ω –≤—ä–ø—Ä–æ—Å
                    "–ò–º–∞—Ç–µ –ª–∏ –º–∞–≥–∏—á–µ—Å–∫–∏ –ø—Ä—ä—á–∫–∏?"  # –§–∞–Ω—Ç–∞—Å—Ç–∏—á–µ–Ω –ø—Ä–æ–¥—É–∫—Ç
                ]
            },
            # –°–ª–æ–∂–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏
            {
                "category": "–°–ª–æ–∂–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏",
                "questions": [
                    "–ò—Å–∫–∞–º –¥–∞ –∫—É–ø—è –ª–∞–ø—Ç–æ–ø, –Ω–æ –Ω–µ –∑–Ω–∞–º –∫–æ–π –¥–∞ –∏–∑–±–µ—Ä–∞. –ú–æ–∂–µ—Ç–µ –ª–∏ –¥–∞ –º–∏ –ø–æ–º–æ–≥–Ω–µ—Ç–µ?",
                    "–ò–º–∞—Ç–µ –ª–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏ –∑–∞ –¥–æ–±—ä—Ä —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥ 500 –ª–µ–≤–∞?",
                    "–ö–æ–π –µ –Ω–∞–π-–¥–æ–±—Ä–∏—è—Ç –ø—Ä–æ–¥—É–∫—Ç –∑–∞ —Å—Ç—É–¥–µ–Ω—Ç?",
                    "–ò—Å–∫–∞–º –¥–∞ –Ω–∞–ø—Ä–∞–≤—è –ø–æ—Ä—ä—á–∫–∞, –Ω–æ –∏–º–∞–º –≤—ä–ø—Ä–æ—Å–∏ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫–∞—Ç–∞ –∏ –ø–ª–∞—â–∞–Ω–µ—Ç–æ.",
                    "–ú–æ–≥–∞ –ª–∏ –¥–∞ –ø–æ—Ä—ä—á–∞–º –ø—Ä–æ–¥—É–∫—Ç –∏ –¥–∞ –≥–æ –≤—ä—Ä–Ω–∞ –∞–∫–æ –Ω–µ –º–∏ —Ö–∞—Ä–µ—Å–∞?",
                    "–ò–º–∞—Ç–µ –ª–∏ –ø–∞–∫–µ—Ç–Ω–∏ –æ—Ñ–µ—Ä—Ç–∏ –∑–∞ –æ—Ñ–∏—Å –æ–±–æ—Ä—É–¥–≤–∞–Ω–µ?",
                    "–ö–∞–∫–≤–∞ –µ —Ä–∞–∑–ª–∏–∫–∞—Ç–∞ –º–µ–∂–¥—É –≤–∞—à–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç–∏ –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∏—Ç–µ?",
                    "–ò–º–∞—Ç–µ –ª–∏ —Å—ä–≤–µ—Ç–∏ –∑–∞ –∏–∑–±–æ—Ä –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â –ø—Ä–æ–¥—É–∫—Ç?",
                    "–ú–æ–≥–∞ –ª–∏ –¥–∞ –∫–æ–º–±–∏–Ω–∏—Ä–∞–º –Ω—è–∫–æ–ª–∫–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –µ–¥–Ω–∞ –ø–æ—Ä—ä—á–∫–∞?",
                    "–ò–º–∞—Ç–µ –ª–∏ —É—Å–ª—É–≥–∞ –∑–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏—Ç–µ?"
                ]
            }
        ]

    def run_tests(self) -> None:
        """Run comprehensive tests with various question types"""
        
        test_cases = self._get_test_cases()
        
        print("=" * 80)
        print("ü§ñ RAG CHATBOT UNIT TESTS")
        print("=" * 80)
        print()
        
        total_tests = 0
        total_score = 0
        
        for test_group in test_cases:
            print(f"üìÇ {test_group['category']}")
            print("-" * 50)
            
            for question in test_group['questions']:
                total_tests += 1
                print(f"\n‚ùì –í—ä–ø—Ä–æ—Å: {question}")
                
                result = self.test_query(question)
                score = result.get('score', 0)
                answer = result.get('answer', '–ù—è–º–∞ –æ—Ç–≥–æ–≤–æ—Ä')
                sources = result.get('sources', [])
                
                total_score += score
                
                print(f"üìä Score: {score}/100")
                print(f"üí¨ –û—Ç–≥–æ–≤–æ—Ä: {answer}")
                
                if sources:
                    print(f"üìö –ò–∑—Ç–æ—á–Ω–∏—Ü–∏ ({len(sources)}):")
                    for source in sources[:3]:  # Show max 3 sources
                        source_id = source.get('source_id', 'N/A')
                        relevance = source.get('relevance', 0)
                        print(f"   ‚Ä¢ {source_id} ({relevance:.1f}%)")
                
                # Add small delay to avoid overwhelming the API
                time.sleep(0.5)
            
            print("\n" + "=" * 50)
        
        # Summary
        avg_score = total_score / total_tests if total_tests > 0 else 0
        high_score_tests = sum(1 for _ in range(total_tests) if avg_score >= 80)
        
        print(f"\nüìà SUMMARY:")
        print(f"   Total tests: {total_tests}")
        print(f"   Average score: {avg_score:.1f}/100")
        print(f"   Tests above 80: {high_score_tests}")
        print(f"   Success rate: {(high_score_tests/total_tests)*100:.1f}%")
        
        # Category breakdown
        print(f"\nüìä CATEGORY BREAKDOWN:")
        for test_group in test_cases:
            category_tests = len(test_group['questions'])
            print(f"   {test_group['category']}: {category_tests} tests")
        
        print("=" * 80)

def main():
    """Main function to run the tests"""
    import argparse
    
    parser = argparse.ArgumentParser(description='RAG Chatbot Unit Tests')
    parser.add_argument('--url', default='http://localhost:8000', 
                       help='Base URL of the chatbot API (default: http://localhost:8000)')
    parser.add_argument('--category', help='Run tests for specific category only')
    parser.add_argument('--list-categories', action='store_true', 
                       help='List all available test categories')
    
    args = parser.parse_args()
    
    tester = ChatbotTester(base_url=args.url)
    
    if args.list_categories:
        print("üìã Available test categories:")
        test_cases = tester._get_test_cases()
        for i, test_group in enumerate(test_cases, 1):
            print(f"   {i}. {test_group['category']} ({len(test_group['questions'])} tests)")
        return
    
    if args.category:
        print(f"Starting RAG Chatbot Unit Tests for category: {args.category}")
        print(f"Make sure the chatbot is running on {args.url}")
        print()
        tester.run_category_test(args.category)
    else:
        print("Starting RAG Chatbot Unit Tests...")
        print(f"Make sure the chatbot is running on {args.url}")
        print()
        tester.run_tests()

if __name__ == "__main__":
    main()
